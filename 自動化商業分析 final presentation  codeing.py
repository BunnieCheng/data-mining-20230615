# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u42Uwt5gLFp6x2bh2EUkMsT3evWNO6s5
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error
import matplotlib.pyplot as plt



from google.colab import drive
drive.mount('/content/drive')
data = pd.read_csv('/content/drive/MyDrive/CSV 原始檔/file.csv')
print(data)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error

# 讀取資料
file_name = "/content/drive/MyDrive/CSV 原始檔/file.csv"
f = open(file_name, mode="rb")
data = pd.read_csv(f)

"""查看檔案大小"""
print(f"Data shape: {data.shape}")

"""篩選出2018的資料"""
data['DataCreationDate'] = pd.to_datetime(data['DataCreationDate'])
data_2018 = data[data['DataCreationDate'].dt.year == 2018]

"""篩選出2018的資料"""
county_data = data_2018[data_2018['County'] == '臺北市']
print(f"Data shape: {county_data.shape}")
# 判斷「county_data」的 DataFrame 中，各個欄位中是否有空值
county_data.isnull().any()
county_data_filled_with_0 = county_data.fillna(0)
county_data_without_nd = county_data_filled_with_0.replace('ND', 0)
county_data_without_nan = county_data_without_nd.replace('NaN', 0)
cleaned_air_data = county_data_without_nan.replace('-', 0)
cleaned_air_data
cleaned_air_data.isnull().any()

# 型別轉換
from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()
cleaned_air_data['County', 'SiteName','AQI','Pollutant','Status','SO2', 'CO', 'O3', 'O3 8hr', 'PM10', 'PM2.5', 'NO2', 'NOx', 'NO', 'WindSpeed', 'WindDirec','DataCreationData','Unit','CO 8hr','PM2.5 AVG','PM10 AVG','SO2 AVG','Longitude','Latitude','SiteId'] = label_encoder.fit_transform(cleaned_air_data['County'])

# 確定特徵列和目標列
features = ['SO2', 'CO', 'O3', 'PM10', 'PM2.5', 'NO2', 'NOx', 'NO', 'WindSpeed', 'WindDirec']
target = 'AQI'

# 划分訓練集和測試集
X_train, X_test, y_train, y_test = train_test_split(cleaned_air_data[features], cleaned_air_data[target], test_size=0.2, random_state=42)

# 建立並訓練隨機森林回歸模型
rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train, y_train)

# 在測試集上進行預測
y_pred = rf_model.predict(X_test)

# 繪製散點圖
plt.scatter(y_test, y_pred, s=1)

plt.xlabel('Actual AQI')
plt.ylabel('Predict AQI')
plt.title('Taipei Result')
#

import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.preprocessing import LabelEncoder

# 讀取資料
file_name = "/content/drive/MyDrive/CSV 原始檔/file.csv"
data = pd.read_csv(file_name)

"""查看檔案大小"""
print(f"Data shape: {data.shape}")

"""篩選出2018的資料"""
data['DataCreationDate'] = pd.to_datetime(data['DataCreationDate'])
data_2018 = data[data['DataCreationDate'].dt.year == 2018]

"""篩選出2018的資料"""
county_data = data_2018[data_2018['County'] == '臺北市']

# 判斷「county_data」的 DataFrame 中，各個欄位中是否有空值
county_data.isnull().any()
county_data_filled_with_0 = county_data.fillna(0)
county_data_without_nd = county_data_filled_with_0.replace('ND', 0)
county_data_without_nan = county_data_without_nd.replace('NaN', 0)
cleaned_air_data = county_data_without_nan.replace('-', 0)
cleaned_air_data
cleaned_air_data.isnull().any()

# 型別轉換
label_encoder = LabelEncoder()
cleaned_air_data['County'] = label_encoder.fit_transform(cleaned_air_data['County'])
cleaned_air_data['SiteName'] = label_encoder.fit_transform(cleaned_air_data['SiteName'])

# 確定特徵列和目標列
features = ['SO2', 'CO', 'O3', 'PM10', 'PM2.5', 'NO2', 'NOx', 'NO', 'WindSpeed', 'WindDirec']
target = 'AQI'

# 划分訓練集和測試集
X_train, X_test, y_train, y_test = train_test_split(cleaned_air_data[features], cleaned_air_data[target], test_size=0.2, random_state=42)

# 建立並訓練隨機森林回歸模型
rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train, y_train)

# 在測試集上進行預測
y_pred = rf_model.predict(X_test)

# 將預測結果和實際值組成DataFrame
results_df = pd.DataFrame({'Actual AQI': y_test, 'Predicted AQI': y_pred})

# 使用Plotly繪製散點圖
fig = px.scatter(results_df, x='Actual AQI', y='Predicted AQI', title='Taipei Result')
fig.show()

# 评估模型性能
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)

# 打印评估结果
print('Mean Squared Error: ', mse)
print('Mean Absolute Error: ', mae)


# 變量重要性
importance = rf_model.feature_importances_
plt.barh(features, importance)
plt.show()

rf_model.fit(X_train, y_train)
y_train_pred=rf_model.predict(X_train)
y_test_pred=rf_model.predict(X_test)


from sklearn.metrics import mean_squared_error, explained_variance_score, mean_absolute_error, r2_score

# 划分驗證集
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

# 訓練隨機森林回歸模型
rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train, y_train)

# 評估模型在訓練集上的表現
y_train_pred = rf_model.predict(X_train)
print("隨機森林模型評估 - 訓練集：")
print('訓練集 r^2:', rf_model.score(X_train, y_train))
print('均方誤差（MSE）:', mean_squared_error(y_train, y_train_pred))
print('平均絕對誤差（MAE）:', mean_absolute_error(y_train, y_train_pred))
print('解釋方差得分:', explained_variance_score(y_train, y_train_pred))

# 評估模型在驗證集上的表現
y_val_pred = rf_model.predict(X_val)
print("\n隨機森林模型評估 - 驗證集：")
print('驗證集 r^2:', rf_model.score(X_val, y_val))
print('均方誤差（MSE）:', mean_squared_error(y_val, y_val_pred))
print('平均絕對誤差（MAE）:', mean_absolute_error(y_val, y_val_pred))
print('解釋方差得分:', explained_variance_score(y_val, y_val_pred))

# 在測試集上進行預測
y_test_pred = rf_model.predict(X_test)

# 評估模型在測試集上的表現
print("\n隨機森林模型評估 - 測試集：")
print('測試集 r^2:', rf_model.score(X_test, y_test))
print('均方誤差（MSE）:', mean_squared_error(y_test, y_test_pred))
print('平均絕對誤差（MAE）:', mean_absolute_error(y_test, y_test_pred))
print('解釋方差得分:', explained_variance_score(y_test, y_test_pred))

import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.preprocessing import LabelEncoder

# 讀取資料
file_name = "/content/drive/MyDrive/CSV 原始檔/file.csv"
data = pd.read_csv(file_name)

"""查看檔案大小"""
print(f"Data shape: {data.shape}")

"""篩選出2018的資料"""
data['DataCreationDate'] = pd.to_datetime(data['DataCreationDate'])
data_2018 = data[data['DataCreationDate'].dt.year == 2018]

"""篩選出2018的資料"""
county_data = data_2018[data_2018['County'] == '臺北市']

# 判斷「county_data」的 DataFrame 中，各個欄位中是否有空值
county_data.isnull().any()
county_data_filled_with_0 = county_data.fillna(0)
county_data_without_nd = county_data_filled_with_0.replace('ND', 0)
county_data_without_nan = county_data_without_nd.replace('NaN', 0)
cleaned_air_data = county_data_without_nan.replace('-', 0)
cleaned_air_data
cleaned_air_data.isnull().any()

# 型別轉換
label_encoder = LabelEncoder()
cleaned_air_data['County'] = label_encoder.fit_transform(cleaned_air_data['County'])
cleaned_air_data['SiteName'] = label_encoder.fit_transform(cleaned_air_data['SiteName'])

# 確定特徵列和目標列
features = ['SO2', 'CO', 'O3', 'PM10', 'PM2.5', 'NO2', 'NOx', 'NO', 'WindSpeed', 'WindDirec']
target = 'AQI'

# 划分訓練集和測試集
X_train, X_test, y_train, y_test = train_test_split(cleaned_air_data[features], cleaned_air_data[target], test_size=0.2, random_state=42)

from sklearn.svm import SVR

# 建立並訓練支持向量機回歸模型
svm_model = SVR()
svm_model.fit(X_train, y_train)

# 在測試集上進行預測
y_pred_svm = svm_model.predict(X_test)

# 繪製散點圖
plt.scatter(y_test, y_pred_svm, s=1)
plt.xlabel('Actual AQI')
plt.ylabel('Predicted AQI')
plt.title('All Counties Result (SVM)')

plt.tick_params(axis='x', pad=10)
plt.tick_params(axis='y', pad=10)

plt.show()

# 评估模型性能
mse_svm = mean_squared_error(y_test, y_pred_svm)
mae_svm = mean_absolute_error(y_test, y_pred_svm)

# 打印评估结果
print('Mean Squared Error (SVM): ', mse_svm)
print('Mean Absolute Error (SVM): ', mae_svm)


svm_model.fit(X_train, y_train)
y_train_pred=svm_model.predict(X_train)
y_test_pred=svm_model.predict(X_test)


from sklearn.metrics import mean_squared_error, explained_variance_score, mean_absolute_error, r2_score

# 划分驗證集
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

# 訓練隨機森林回歸模型
#svm_model = RandomForestRegressor(random_state=42)
#svm_model.fit(X_train, y_train)

# 評估模型在訓練集上的表現
y_train_pred = svm_model.predict(X_train)
print("隨機森林模型評估 - 訓練集：")
print('訓練集 r^2:', svm_model.score(X_train, y_train))
print('均方誤差（MSE）:', mean_squared_error(y_train, y_train_pred))
print('平均絕對誤差（MAE）:', mean_absolute_error(y_train, y_train_pred))
print('解釋方差得分:', explained_variance_score(y_train, y_train_pred))

# 評估模型在驗證集上的表現
y_val_pred = svm_model.predict(X_val)
print("\n隨機森林模型評估 - 驗證集：")
print('驗證集 r^2:', svm_model.score(X_val, y_val))
print('均方誤差（MSE）:', mean_squared_error(y_val, y_val_pred))
print('平均絕對誤差（MAE）:', mean_absolute_error(y_val, y_val_pred))
print('解釋方差得分:', explained_variance_score(y_val, y_val_pred))

# 在測試集上進行預測
y_test_pred = svm_model.predict(X_test)

# 評估模型在測試集上的表現
print("\n隨機森林模型評估 - 測試集：")
print('測試集 r^2:', svm_model.score(X_test, y_test))
print('均方誤差（MSE）:', mean_squared_error(y_test, y_test_pred))
print('平均絕對誤差（MAE）:', mean_absolute_error(y_test, y_test_pred))
print('解釋方差得分:', explained_variance_score(y_test, y_test_pred))

import numpy as np
import pandas as pd

# 假设您已经定义了 X_train、X_test、y_train 和 y_test

# 将NaN值替换为0
X_train = X_train.fillna(0)
X_test = X_test.fillna(0)
y_train = y_train.fillna(0)
y_test = y_test.fillna(0)

# 打印处理后的 y_train
print(y_train)

data.drop([u'Status'],axis = 1).corr()

import seaborn as sns
sns.set(style="ticks", color_codes=True);
# 創建自定義顏色調色板
palette = sns.xkcd_palette(['dark blue', 'dark green', 'gold', 'orange'])
# 畫散點圖矩陣
sns.pairplot(cleaned_air_data.drop([u'Status'],axis = 1), diag_kind = 'kde', plot_kws=dict(alpha = 0.7))
plt.show()